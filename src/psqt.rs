use shakmaty::{Chess, Color, Position, Role, Square};
use std::sync::OnceLock;

// Define the PSQT as a static OnceLock
static PSQT: OnceLock<[[i32; 64]; 6]> = OnceLock::new();

pub fn get_psqt() -> &'static [[i32; 64]; 6] {
    PSQT.get_or_init(|| {
        [
            // Pawn
            [
                0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 10, 10, 20, 30, 30, 20, 10,
                10, 5, 5, 10, 25, 25, 10, 5, 5, 0, 0, 0, 20, 21, 0, 0, 0, 5, -5, -10, 0, 0, -10,
                -5, 5, 5, 10, 10, -31, -31, 10, 10, 5, 0, 0, 0, 0, 0, 0, 0, 0,
            ],
            // Knight
            [
                -50, -40, -30, -30, -30, -30, -40, -50, -40, -20, 0, 0, 0, 0, -20, -40, -30, 0, 10,
                15, 15, 10, 0, -30, -30, 5, 15, 20, 20, 15, 5, -30, -30, 0, 15, 20, 20, 15, 0, -30,
                -30, 5, 10, 15, 15, 11, 5, -30, -40, -20, 0, 5, 5, 0, -20, -40, -50, -40, -30, -30,
                -30, -30, -40, -50,
            ],
            // Bishop
            [
                -20, -10, -10, -10, -10, -10, -10, -20, -10, 0, 0, 0, 0, 0, 0, -10, -10, 0, 5, 10,
                10, 5, 0, -10, -10, 5, 5, 10, 10, 5, 5, -10, -10, 0, 10, 10, 10, 10, 0, -10, -10,
                10, 10, 10, 10, 10, 10, -10, -10, 5, 0, 0, 0, 0, 5, -10, -20, -10, -10, -10, -10,
                -10, -10, -20,
            ],
            // Rook
            [
                0, 0, 0, 0, 0, 0, 0, 0, 5, 10, 10, 10, 10, 10, 10, 5, -5, 0, 0, 0, 0, 0, 0, -5, -5,
                0, 0, 0, 0, 0, 0, -5, -5, 0, 0, 0, 0, 0, 0, -5, -5, 0, 0, 0, 0, 0, 0, -5, -5, 0, 0,
                0, 0, 0, 0, -5, 0, 0, 0, 5, 5, 0, 0, 0,
            ],
            // Queen
            [
                -20, -10, -10, -5, -5, -10, -10, -20, -10, 0, 0, 0, 0, 0, 0, -10, -10, 0, 5, 5, 5,
                5, 0, -10, -5, 0, 5, 5, 5, 5, 0, -5, 0, 0, 5, 5, 5, 5, 0, -5, -10, 5, 5, 5, 5, 5,
                0, -10, -10, 0, 5, 0, 0, 0, 0, -10, -20, -10, -10, -5, -5, -10, -10, -20,
            ],
            // King
            [
                -30, -40, -40, -50, -50, -40, -40, -30, -30, -40, -40, -50, -50, -40, -40, -30,
                -30, -40, -40, -50, -50, -40, -40, -30, -30, -40, -40, -50, -50, -40, -40, -30,
                -20, -30, -30, -40, -40, -30, -30, -20, -10, -20, -20, -20, -20, -20, -20, -10, 20,
                20, 0, 0, 0, 0, 20, 20, 0, 30, 10, 0, 0, 10, 30, 0,
            ],
        ]
    })
}

#[inline]
pub fn piece_value(board: &Chess, role: Role, square: Square) -> i32 {
    let us = board.turn();
    let index = if us == Color::White {
        square as u8
    } else {
        mirror_square(square as u8)
    };
    get_psqt()[role as usize - 1][index as usize]
}

#[inline]
fn mirror_square(sq_index: u8) -> u8 {
    sq_index ^ 56
}
